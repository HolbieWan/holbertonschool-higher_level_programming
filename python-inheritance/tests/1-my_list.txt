DocTest for '1-my_list' module
==============================

>>> MyList = __import__('1-my_list').MyList

# Test present: check instantiation
>>> my_list = MyList()
>>> isinstance(my_list, MyList)
True

# Test present: check inherits from list
>>> isinstance(my_list, list)
True

# Test present: check __str__
>>> my_list = MyList([3, 1, 2])
>>> str(my_list)
'[3, 1, 2]'

# Test present: check append()
>>> my_list.append(5)
>>> str(my_list)
'[3, 1, 2, 5]'

# Test present: check print_sorted() with sorted append
>>> my_list = MyList([1, 2, 3])
>>> my_list.append(4)
>>> my_list.print_sorted()
[1, 2, 3, 4]

# Test present: check print_sorted() with not sorted append
>>> my_list = MyList([3, 1, 2])
>>> my_list.append(4)
>>> my_list.print_sorted()
[1, 2, 3, 4]

# Test present: check print_sorted() with no sorted append with negative number
>>> my_list = MyList([3, -1, 2])
>>> my_list.append(4)
>>> my_list.print_sorted()
[-1, 2, 3, 4]

# Test present: check print_sorted() with empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

# Test present: check print_sorted() returns a new list
>>> my_list = MyList([3, 1, 2])
>>> sorted_list = my_list.print_sorted()
[1, 2, 3]
>>> my_list == sorted_list
False

# Correct output - case: class creation
>>> my_list = MyList()
>>> str(my_list)
'[]'

# Correct output - case: class creation and regular print
>>> my_list = MyList([3, 1, 2])
>>> print(my_list)
[3, 1, 2]

# Correct output - case: class creation, append and regular print
>>> my_list = MyList([3, 1, 2])
>>> my_list.append(5)
>>> print(my_list)
[3, 1, 2, 5]

# Correct output - case: class creation, append, regular print and sorted print
>>> my_list = MyList([3, 1, 2])
>>> my_list.append(5)
>>> print(my_list)
[3, 1, 2, 5]
>>> my_list.print_sorted()
[1, 2, 3, 5]

# Correct output - case: class creation, multiple appends, regular print and sorted print
>>> my_list = MyList([3, 1, 2])
>>> my_list.append(5)
>>> my_list.append(0)
>>> my_list.append(-1)
>>> print(my_list)
[3, 1, 2, 5, 0, -1]
>>> my_list.print_sorted()
[-1, 0, 1, 2, 3, 5]

